#!/usr/bin/env python

##
##  Copyright 2014 SRI International
##
##  Based on code by David A. Gutman: 
##    https://groups.google.com/d/msg/xnat_discussion/FNVYWNYdddA/HFGq5n_OaswJ
##
##  http://nitrc.org/projects/ncanda-datacore/
##
##  This file is part of the N-CANDA Data Component Software Suite, developed
##  and distributed by the Data Integration Component of the National
##  Consortium on Alcohol and NeuroDevelopment in Adolescence, supported by
##  the U.S. National Institute on Alcohol Abuse and Alcoholism (NIAAA) under
##  Grant No. 1U01 AA021697
##
##  The N-CANDA Data Component Software Suite is free software: you can
##  redistribute it and/or modify it under the terms of the GNU General Public
##  License as published by the Free Software Foundation, either version 3 of
##  the License, or (at your option) any later version.
##
##  The N-CANDA Data Component Software Suite is distributed in the hope that it
##  will be useful, but WITHOUT ANY WARRANTY; without even the implied
##  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License along
##  with the N-CANDA Data Component Software Suite.  If not, see
##  <http://www.gnu.org/licenses/>.
##
##  $Revision$
##
##  $LastChangedDate$
##
##  $LastChangedBy$
##

import pyxnat
import os.path
import time
import sys
import re

import argparse
parser = argparse.ArgumentParser( description="Trigger pipelines to generate missing thumbnails for sessions that are missing them." )
parser.add_argument( "-v", "--verbose", help="Verbose operation", action="store_true")
args = parser.parse_args()

# Create interface using stored configuration
xnat = pyxnat.Interface( config = os.path.join( os.path.expanduser("~"), '.server_config/ncanda.cfg' ) )

# List of scan type wildcards to exclude
exclude_types = [ '.*phoenix.*', '.*colfa.*', '.*tensor.*' ]

# Check one experiment
def check_for_snapshots( xnat, subj, expt, project ):
    """This will scan a session to see if snapshots are available, and return True/False if it finds them..
    In some cases a scan may exist that has no snapshot, so I will have to set a threshold/ % that would suggest
    the Autorun pipeline properly generated webQC Images--- some images by default do not generate snapshots such as phoenix
    reports and other type of non-image scans"""
    expt_obj = xnat.select.project( project ).subject( subj ).experiment( expt )
    scans_found = 0
    scans_w_snapshot = 0
    for scan in expt_obj.scans():
        if not len( [ t for t in exclude_types if re.match( t, scan.attrs.get('type').lower() ) ] ):
            a = scan.resource('SNAPSHOTS')
            if a.id():
                scans_w_snapshot +=1
            scans_found += 1

    if args.verbose:
        print "Found a total of %d snapshots for %d scans" % (scans_w_snapshot,scans_found)

    return (scans_found,scans_w_snapshot)

# Check one project
def check_project( xnat, project ):
    subj_list = xnat.select.project( project ).subjects().get('label')

    for subj in subj_list:
        expt_list = xnat.select.project( project ).subject( subj ).experiments().get('label')
        for expt in expt_list:
            (scans_found,snapshots_found) = check_for_snapshots( xnat, subj, expt, project )
            if snapshots_found < scans_found:
                if args.verbose:
                    print "Missing snapshots for",subj,expt
                expt_obj = xnat.select.project( project ).subject( subj ).experiment( expt )
                expt_obj.trigger_pipelines()
                time.sleep(20 * (scans_found-snapshots_found)) ### inserting a small delay so I don't queue up 100's of processes
                ### may want to throttle this/add ap ause as it doens't seem to queue things but tries to run everything at once 

# Get a list of all MR imaging sessions
project_ids = xnat.select.projects().get()
for pid in project_ids:
    check_project( xnat, pid )
