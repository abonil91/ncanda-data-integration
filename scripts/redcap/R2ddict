#!/usr/bin/env python

##
##  Copyright 2013-2014 SRI International
##
##  http://nitrc.org/projects/ncanda-datacore/
##
##  This file is part of the N-CANDA Data Component Software Suite, developed
##  and distributed by the Data Integration Component of the National
##  Consortium on Alcohol and NeuroDevelopment in Adolescence, supported by
##  the U.S. National Institute on Alcohol Abuse and Alcoholism (NIAAA) under
##  Grant No. 1U01 AA021697
##
##  The N-CANDA Data Component Software Suite is free software: you can
##  redistribute it and/or modify it under the terms of the GNU General Public
##  License as published by the Free Software Foundation, either version 3 of
##  the License, or (at your option) any later version.
##
##  The N-CANDA Data Component Software Suite is distributed in the hope that it
##  will be useful, but WITHOUT ANY WARRANTY; without even the implied
##  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License along
##  with the N-CANDA Data Component Software Suite.  If not, see
##  <http://www.gnu.org/licenses/>.
##
##  $Revision$
##
##  $LastChangedDate$
##
##  $LastChangedBy$
##

# Setup command line parser
import argparse
parser = argparse.ArgumentParser( description="Convert R syntax file generated by LimeSurvey to REDCap data dictionary", formatter_class=argparse.ArgumentDefaultsHelpFormatter )
parser.add_argument( "-v", "--verbose", help="Verbose operation", action="store_true")
parser.add_argument( "--fieldname-to-notes", help="Add field name to field notes (this allows you to see each field's name in the entry form).", action="store_true")
parser.add_argument( "--no-translate-yn", help="Disable translation of 1/2 encoded Y/N fields to 1/0 encoding (the Data Entry project requires the 1/0 encoding).", action="store_true")
parser.add_argument( "--form-name", help="REDCap form name for the new data dictionary", action="store")
parser.add_argument( "--field-prefix", help="Field prefix to add to all variable names in the REDCap data dictionary", action="store", default="")
parser.add_argument( "Rfile", help="Input R syntax file.")
parser.add_argument( "ddictfile", help="Output CSV file with the generated data dictionary.")
args = parser.parse_args()

import re
complete_lines = []
partial_line = None

# Cleanup fieldname to canonical form
def clean_field_name( fieldname ):
    fieldname = fieldname.lower()
    fieldname = re.sub( ' ', '_', fieldname )
    fieldname = re.sub( '_+', '_', fieldname )
    fieldname = re.sub( '_$', '', fieldname )
    return fieldname

# We first read the file and put all multi-line strings back together
infile = open( args.Rfile, 'r' )
for line in infile:
    # First, replace escaped double quotes with single quotes to distinguish from actual string delimiters
    line = re.sub( '\\\\"', '\'', line )
    # Is there a single, unmatched double quote on this line?
    if re.match( '^[^"]*"[^"]*$', line ):
        # Yes - append to previous partial line if one exists, otherwise create a new partial line
        if partial_line:
            complete_lines.append( ''.join( [ partial_line, line ] ) )
            partial_line = None
        else:
            partial_line = line
    else:
        if partial_line:
            partial_line = ''.join( [ partial_line, line ] )
        else:
            complete_lines.append( line )

if partial_line:
    complete_lines.append( partial_line )

columns = ['field_name','form','section','type','label','choices','notes','validation','validation_min','validation_max']

import pandas
datadict = pandas.DataFrame( index=[], columns=columns)

mode = ''
for line in complete_lines:
    match = re.match( 'data\[,\s*([0-9]+)\]\s*<-\s*as\.(character|numeric)', line )
    if match:
        rowdict = dict()
        rowdict['type'] = 'text'
        rowdict['notes'] = ''
        if match.group(2) == 'numeric':
            rowdict['validation'] = 'number'
        datadict = pandas.concat( [datadict, pandas.DataFrame( rowdict, index=[match.group(1)] )] )

    match = re.match( 'attributes\(data\)\$variable.labels\[([0-9]+)\]\s*<-\s*\"(.*)\"', line, flags=re.DOTALL )
    if match:
        variable = match.group(1)
        match_name_group = re.match( '^\[([^\|\]]*)(\|[^|\]]*)?(\|[^|\]]*)?\]\s*(.*)$', match.group(2), flags=re.DOTALL )
        if match_name_group:
            datadict['label'][variable] = match_name_group.group(1).strip()
            datadict['section'][variable] = match_name_group.group(4).strip()

            notes_1 = match_name_group.group(2)
            notes_2 = match_name_group.group(3)
            if notes_1 and notes_2:
                datadict['notes'][variable] = 'Range: "%s" to "%s"' % (notes_1[1:].strip(),notes_2[1:].strip())
        else:
            datadict['label'][variable] = match.group(2).strip()

    match = re.match( 'names\(data\)\[([0-9]*)\]\s*<-\s*\"(.*)\"', line )
    if match:
        variable = match.group(1)
        datadict['field_name'][variable] = '%s%s' % (args.field_prefix, clean_field_name( match.group(2) ))

        if args.fieldname_to_notes:
            if datadict['notes'][variable] == '':
                datadict['notes'][variable] = '[' + datadict['field_name'][variable] + ']'
            else:
                datadict['notes'][variable] = '[' + datadict['field_name'][variable] + '] ' + datadict['notes'][variable]

    match = re.match( 'data\[,\s*([0-9]+)\]\s*<-\s*factor\(data\[,\s*([0-9])+\],\s*levels=c\(([^)]*)\),\s*labels=c\(((\"[^"]*\",)*(\"[^"]*\")*)\)', line )
    if match:
        variable = match.group( 1 )
        datadict['type'][variable] = 'radio'
        datadict['validation'][variable] = ''
        datadict['validation_min'][variable] = ''
        datadict['validation_max'][variable] = ''

        keys_and_values = [ re.sub( '\"', '', '%s, %s' % (key,value) ) for (key,value) in zip( match.group(3).split( ',' ), match.group(4).split( '\",\"' ) ) ]
        datadict['choices'][variable] = ' | '.join( keys_and_values )

        if not args.no_translate_yn:
            if datadict['choices'][variable] in [ '1, Yes | 2, No', '2, No | 1, Yes' ]:
                datadict['choices'][variable] = '1, Yes | 0, No'

# Go through data dictionary back to front and remove all section names except for the first in each group
last_index = ''
last_section = ''
for idx in reversed( datadict.index ):
    if datadict['section'][idx] == last_section:
        datadict['section'][last_index] = ''

    last_section = datadict['section'][idx]
    last_index = idx

# Apply form name and field prefix, if provided on the command line
datadict['form'] = args.form_name

# Write data dictionary to CSV file
datadict.to_csv( args.ddictfile, cols=columns, index=False )
