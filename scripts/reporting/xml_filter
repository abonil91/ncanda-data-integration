#!/usr/bin/env python
##
##  Copyright 2015 SRI International
##  License: https://ncanda.sri.com/software-license.txt
##
##  $Revision: 2110 $
##  $LastChangedBy: nicholsn $
##  $LastChangedDate: 2015-08-07 09:10:29 -0700 (Fri, 07 Aug 2015) $
##
"""
REPORT: xml_filter
======================
This script filters XNAT XML file and generates a report of the results.
"""

import os
import sys

import redcap
import pandas as pd

fields = ['study_id', 'redcap_event_name','exclude', 'visit_ignore',
          'visit_date','mri_missing', 'mri_xnat_sid','mri_xnat_eids'];

forms=['mr_session_report', 'visit_date',
       'demographics']

def get_project_entry(args=None):
    """
    Pulls the data from REDCap
    """
    # Get API key.
    summary_key_file = open(os.path.join(os.path.expanduser("~"),
                                         '.server_config',
                                         'redcap-dataentry-token'), 'r')
    summary_api_key = summary_key_file.read().strip()

    # Connect to API.
    project_entry = redcap.Project('https://ncanda.sri.com/redcap/api/',
                                   summary_api_key, verify_ssl=False)
    return project_entry

def data_entry_fields(fields,project,arm):
    """
    Gets the dataframe containing a specific arm from REDCap
    """
    # Get a dataframe of fields
    data_entry_raw = project.export_records(fields=fields, format='df',
        events=[arm])
    return data_entry_raw


def main(args):
    project_entry = get_project_entry()
    project_df = data_entry_fields(fields,project_entry,args.visit)

    xnat_eids = project_df['mri_xnat_eids'].tolist()

    xnat_csv = pd.read_csv(args.csvfile)
    filter_csv = xnat_csv[xnat_csv['experiment_id'].isin(xnat_eids)]
    filter_csv.to_csv(args.csvdest)

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('-v','--visit', default=['baseline_visit_arm_1', '1y_visit_arm_1'],
                        help='Select which visit the QC script runs on',)
    parser.add_argument('-d','--csvdest', action="store", default="xml_filter.csv"
                        help='Destion where filered file will be stored. Ex: directory/csv.csv')
    parser.add_argument( "csvfile",  action="store",
                        help="Directory where CSV file is stored. Ex: direcotry/csv.csv")
    argv = parser.parse_args()
    sys.exit(main(args=argv))
